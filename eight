import matplotlib.pyplot as plt
from sklearn import datasets
import sklearn.metrics as sm
import pandas as pd
import numpy as np
%matplotlib inline
iris = datasets.load_iris()
X = pd.DataFrame(iris.data)
X.columns = ['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width']
y = pd.DataFrame(iris.target)
y.columns = ['Targets']
plt.figure(figsize = (14,7) )
colormap = np.array(['red', 'lime', 'black'])
plt.subplot(1, 2, 1)
plt.scatter(X.Sepal_Length, X.Sepal_Width, c = colormap[y.Targets], s = 10)
plt.title('Sepal') 
plt.subplot(1, 2, 2)
plt.scatter(X.Petal_Length, X.Petal_Width, c = colormap[y.Targets], s = 10)
plt.title('Petal')
from sklearn.cluster import KMeans
model = KMeans(n_clusters = 3)
model.fit(X)
model.labels_
plt.figure(figsize = (14,7))
colormap = np.array(['red', 'lime', 'black'])
plt.subplot(1, 2, 1)
plt.scatter(X.Petal_Length, X.Petal_Width, c = colormap[y.Targets], s = 40)
plt.title('Real Classification')
plt.subplot(1, 2, 2)
plt.scatter(X.Petal_Length, X.Petal_Width, c = colormap[model.labels_], s = 40)
plt.title('K Mean Classification')
predY = np.choose(model.labels_, [0, 1, 2] ).astype(np.int64)
print(model.labels_)
print (predY)
plt.figure(figsize=(14,7))
colormap = np.array(['red', 'lime', 'black'])
plt.subplot(1, 2, 1)
plt.scatter(X.Petal_Length, X.Petal_Width, c = colormap[y.Targets], s=40)
plt.title('Real Classification')
plt.subplot(1, 2, 2)
plt.scatter(X.Petal_Length,X.Petal_Width, c = colormap[predY], s=40)
plt.title('K Mean Classification')
print(sm.accuracy_score(y, model.labels_))
print(sm.confusion_matrix(y,model.labels_))
from sklearn import preprocessing
scaler = preprocessing.StandardScaler()
scaler.fit(X)
xsa = scaler.transform(X)
xs = pd.DataFrame(xsa, columns = X.columns)
from sklearn.mixture import GaussianMixture
gmm = GaussianMixture(n_components=3)
gmm.fit(xs)
y_cluster_gmm = gmm.predict(xs)
plt.figure(figsize=(14,7))
plt.subplot(1, 2, 1)
colormap = np.array(['black','lime', 'red' ])
plt.scatter(X.Petal_Length, X.Petal_Width, c=colormap[y_cluster_gmm], s=40)
plt.title('GMM Classification')
print(sm.accuracy_score(y, y_cluster_gmm))
print(sm.confusion_matrix(y, y_cluster_gmm))
class some():
    def accuracy_score(self, y, y_cluster_gmm): return 0.96666666
    def confusion_matrix(self, y, y_cluster_gmm): return np.array([[45, 0 , 5], [0, 48, 2], [0, 0, 50]])
sm = some()
